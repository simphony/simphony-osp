"""Interface for simulation engines."""

from abc import ABC

from osp.core.interfaces.generic import GenericInterface,\
    GenericInterfaceStore


class SimulationInterfaceStore(GenericInterfaceStore):
    """RDFLib store with the added capability of running a simulation."""

    interface: "SimulationEngineInterface"

    def run(self):
        """Instructs the simulation engine interface to run the simulation."""
        return self.interface.run()


class SimulationEngineInterface(ABC, GenericInterface):
    """Interface for simulation engines."""

    # Definition of:
    # SimulationEngineInterface
    # ↓ --------------------- ↓

    def run(self) -> None:
        """Run the simulation and wait for it to complete.

        After it is finished, you have two options.

        At the end of this method, look for everything that was changed,
        and replicate the changes in the interface's session:
        - Then `_update_from_backend` should just return the entity it
            received.
        - Then `_load_from_backend` should return None.

        Or, replicate such changes lazily as entities are requested. This
        has a limitation: if the user asks for all entities, then
        entities that did not exist before (entities with new identifiers)
        and that are not generated by requesting existing entities cannot
        be given to the user. If your engine generates entities meeting the
        above condition, you are limited to the first option.

        When an entity is requested, if the entity existed previously,
        the following can happen (`_update_from_backend`):
        - The simulation connected the entity to NEW entities, that did not
          exist before. Then the NEW entities can be created while
          the request is being processed, given that their identifier did not
          exist before, and then linked to the requested entity.
        - The simulation connected or disconnected the entity to/from other
          entities that may either still exist or have been deleted by the
          simulation. The requested entity CANNOT change the relationships or
          attributes of existing entities while the request is being
          processed, nor should any entities other that itself be deleted
          while the request is being processed.
        - The simulation deleted the requested entity. In such case, please
          delete the entity from the interface's session and return None.

        On the other hand, when the entity is requested and it did not exist
        previously (`_load_from_backend`), then either None should be returned
        (the entity still does not exist) or it should be created. Once
        created, the same rules defined above apply.
        """
        pass

    # + Methods and properties from definition of: GenericInterface.

    # ↑ --------------------- ↑
    # Definition of:
    # SimulationEngineInterface

    store_class = SimulationInterfaceStore
